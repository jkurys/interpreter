-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module ParMylang
  ( happyError
  , myLexer
  , pProgram
  ) where

import Prelude

import qualified AbsMylang
import LexMylang

}

%name pProgram_internal Program
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '!'        { PT _ (TS _ 1)  }
  '!='       { PT _ (TS _ 2)  }
  '%'        { PT _ (TS _ 3)  }
  '&'        { PT _ (TS _ 4)  }
  '&&'       { PT _ (TS _ 5)  }
  '('        { PT _ (TS _ 6)  }
  ')'        { PT _ (TS _ 7)  }
  '*'        { PT _ (TS _ 8)  }
  '+'        { PT _ (TS _ 9)  }
  '++'       { PT _ (TS _ 10) }
  ','        { PT _ (TS _ 11) }
  '-'        { PT _ (TS _ 12) }
  '--'       { PT _ (TS _ 13) }
  '->'       { PT _ (TS _ 14) }
  '/'        { PT _ (TS _ 15) }
  ';'        { PT _ (TS _ 16) }
  '<'        { PT _ (TS _ 17) }
  '<='       { PT _ (TS _ 18) }
  '='        { PT _ (TS _ 19) }
  '=='       { PT _ (TS _ 20) }
  '=>'       { PT _ (TS _ 21) }
  '>'        { PT _ (TS _ 22) }
  '>='       { PT _ (TS _ 23) }
  '['        { PT _ (TS _ 24) }
  '[]'       { PT _ (TS _ 25) }
  ']'        { PT _ (TS _ 26) }
  'bool'     { PT _ (TS _ 27) }
  'break'    { PT _ (TS _ 28) }
  'continue' { PT _ (TS _ 29) }
  'else'     { PT _ (TS _ 30) }
  'false'    { PT _ (TS _ 31) }
  'if'       { PT _ (TS _ 32) }
  'int'      { PT _ (TS _ 33) }
  'print'    { PT _ (TS _ 34) }
  'return'   { PT _ (TS _ 35) }
  'string'   { PT _ (TS _ 36) }
  'true'     { PT _ (TS _ 37) }
  'void'     { PT _ (TS _ 38) }
  'while'    { PT _ (TS _ 39) }
  '{'        { PT _ (TS _ 40) }
  '|'        { PT _ (TS _ 41) }
  '||'       { PT _ (TS _ 42) }
  '}'        { PT _ (TS _ 43) }
  L_Ident    { PT _ (TV _)    }
  L_integ    { PT _ (TI _)    }
  L_quoted   { PT _ (TL _)    }

%%

Ident :: { (AbsMylang.BNFC'Position, AbsMylang.Ident) }
Ident  : L_Ident { (uncurry AbsMylang.BNFC'Position (tokenLineCol $1), AbsMylang.Ident (tokenText $1)) }

Integer :: { (AbsMylang.BNFC'Position, Integer) }
Integer  : L_integ  { (uncurry AbsMylang.BNFC'Position (tokenLineCol $1), (read (tokenText $1)) :: Integer) }

String  :: { (AbsMylang.BNFC'Position, String) }
String   : L_quoted { (uncurry AbsMylang.BNFC'Position (tokenLineCol $1), ((\(PT _ (TL s)) -> s) $1)) }

Program :: { (AbsMylang.BNFC'Position, AbsMylang.Program) }
Program
  : ListTopDef { (fst $1, AbsMylang.Program (fst $1) (snd $1)) }

TopDef :: { (AbsMylang.BNFC'Position, AbsMylang.TopDef) }
TopDef
  : Type Ident '(' ListArg ')' Block { (fst $1, AbsMylang.FnDef (fst $1) (snd $1) (snd $2) (snd $4) (snd $6)) }
  | Type Ident '=' Expr ';' { (fst $1, AbsMylang.VarDef (fst $1) (snd $1) (snd $2) (snd $4)) }

ListTopDef :: { (AbsMylang.BNFC'Position, [AbsMylang.TopDef]) }
ListTopDef
  : TopDef { (fst $1, (:[]) (snd $1)) }
  | TopDef ListTopDef { (fst $1, (:) (snd $1) (snd $2)) }

Arg :: { (AbsMylang.BNFC'Position, AbsMylang.Arg) }
Arg
  : ArgVal { (fst $1, AbsMylang.ArgVal (fst $1) (snd $1)) }
  | Type '&' Ident { (fst $1, AbsMylang.ArgRef (fst $1) (snd $1) (snd $3)) }

ArgVal :: { (AbsMylang.BNFC'Position, AbsMylang.ArgVal) }
ArgVal
  : Type Ident { (fst $1, AbsMylang.Value (fst $1) (snd $1) (snd $2)) }

ListArgVal :: { (AbsMylang.BNFC'Position, [AbsMylang.ArgVal]) }
ListArgVal
  : {- empty -} { (AbsMylang.BNFC'NoPosition, []) }
  | ArgVal { (fst $1, (:[]) (snd $1)) }
  | ArgVal ',' ListArgVal { (fst $1, (:) (snd $1) (snd $3)) }

ListArg :: { (AbsMylang.BNFC'Position, [AbsMylang.Arg]) }
ListArg
  : {- empty -} { (AbsMylang.BNFC'NoPosition, []) }
  | Arg { (fst $1, (:[]) (snd $1)) }
  | Arg ',' ListArg { (fst $1, (:) (snd $1) (snd $3)) }

Block :: { (AbsMylang.BNFC'Position, AbsMylang.Block) }
Block
  : '{' ListStmt '}' { (uncurry AbsMylang.BNFC'Position (tokenLineCol $1), AbsMylang.Block (uncurry AbsMylang.BNFC'Position (tokenLineCol $1)) (snd $2)) }

ListStmt :: { (AbsMylang.BNFC'Position, [AbsMylang.Stmt]) }
ListStmt
  : {- empty -} { (AbsMylang.BNFC'NoPosition, []) }
  | Stmt ListStmt { (fst $1, (:) (snd $1) (snd $2)) }

Stmt :: { (AbsMylang.BNFC'Position, AbsMylang.Stmt) }
Stmt
  : ';' { (uncurry AbsMylang.BNFC'Position (tokenLineCol $1), AbsMylang.Empty (uncurry AbsMylang.BNFC'Position (tokenLineCol $1))) }
  | Block { (fst $1, AbsMylang.BStmt (fst $1) (snd $1)) }
  | Type ListItem ';' { (fst $1, AbsMylang.Decl (fst $1) (snd $1) (snd $2)) }
  | Type Ident '(' ListArg ')' Block { (fst $1, AbsMylang.DeclFn (fst $1) (snd $1) (snd $2) (snd $4) (snd $6)) }
  | '|' ListTup '|' '=' Expr { (uncurry AbsMylang.BNFC'Position (tokenLineCol $1), AbsMylang.DeclTup (uncurry AbsMylang.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $5)) }
  | LHS '=' Expr ';' { (fst $1, AbsMylang.Ass (fst $1) (snd $1) (snd $3)) }
  | Ident '++' ';' { (fst $1, AbsMylang.Incr (fst $1) (snd $1)) }
  | Ident '--' ';' { (fst $1, AbsMylang.Decr (fst $1) (snd $1)) }
  | 'return' Expr ';' { (uncurry AbsMylang.BNFC'Position (tokenLineCol $1), AbsMylang.Ret (uncurry AbsMylang.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | 'return' ';' { (uncurry AbsMylang.BNFC'Position (tokenLineCol $1), AbsMylang.VRet (uncurry AbsMylang.BNFC'Position (tokenLineCol $1))) }
  | 'if' Expr Stmt { (uncurry AbsMylang.BNFC'Position (tokenLineCol $1), AbsMylang.Cond (uncurry AbsMylang.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }
  | 'if' Expr Stmt 'else' Stmt { (uncurry AbsMylang.BNFC'Position (tokenLineCol $1), AbsMylang.CondElse (uncurry AbsMylang.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3) (snd $5)) }
  | 'while' Expr Stmt { (uncurry AbsMylang.BNFC'Position (tokenLineCol $1), AbsMylang.While (uncurry AbsMylang.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }
  | Expr ';' { (fst $1, AbsMylang.SExp (fst $1) (snd $1)) }
  | 'print' Expr { (uncurry AbsMylang.BNFC'Position (tokenLineCol $1), AbsMylang.Print (uncurry AbsMylang.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | 'break' ';' { (uncurry AbsMylang.BNFC'Position (tokenLineCol $1), AbsMylang.Break (uncurry AbsMylang.BNFC'Position (tokenLineCol $1))) }
  | 'continue' ';' { (uncurry AbsMylang.BNFC'Position (tokenLineCol $1), AbsMylang.Cont (uncurry AbsMylang.BNFC'Position (tokenLineCol $1))) }

Tup :: { (AbsMylang.BNFC'Position, AbsMylang.Tup) }
Tup
  : '|' ListTup '|' { (uncurry AbsMylang.BNFC'Position (tokenLineCol $1), AbsMylang.NewTup (uncurry AbsMylang.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | Type Ident { (fst $1, AbsMylang.ArgTup (fst $1) (snd $1) (snd $2)) }

ListTup :: { (AbsMylang.BNFC'Position, [AbsMylang.Tup]) }
ListTup
  : {- empty -} { (AbsMylang.BNFC'NoPosition, []) }
  | Tup { (fst $1, (:[]) (snd $1)) }
  | Tup ',' ListTup { (fst $1, (:) (snd $1) (snd $3)) }

Item :: { (AbsMylang.BNFC'Position, AbsMylang.Item) }
Item
  : Ident { (fst $1, AbsMylang.NoInit (fst $1) (snd $1)) }
  | Ident '=' Expr { (fst $1, AbsMylang.Init (fst $1) (snd $1) (snd $3)) }

ListItem :: { (AbsMylang.BNFC'Position, [AbsMylang.Item]) }
ListItem
  : Item { (fst $1, (:[]) (snd $1)) }
  | Item ',' ListItem { (fst $1, (:) (snd $1) (snd $3)) }

LHS :: { (AbsMylang.BNFC'Position, AbsMylang.LHS) }
LHS
  : Ident { (fst $1, AbsMylang.LVar (fst $1) (snd $1)) }
  | Ident '[' Expr ']' { (fst $1, AbsMylang.LArr (fst $1) (snd $1) (snd $3)) }

ListLHS :: { (AbsMylang.BNFC'Position, [AbsMylang.LHS]) }
ListLHS
  : LHS { (fst $1, (:[]) (snd $1)) }
  | LHS ',' ListLHS { (fst $1, (:) (snd $1) (snd $3)) }

Type :: { (AbsMylang.BNFC'Position, AbsMylang.Type) }
Type
  : 'int' { (uncurry AbsMylang.BNFC'Position (tokenLineCol $1), AbsMylang.Int (uncurry AbsMylang.BNFC'Position (tokenLineCol $1))) }
  | 'string' { (uncurry AbsMylang.BNFC'Position (tokenLineCol $1), AbsMylang.Str (uncurry AbsMylang.BNFC'Position (tokenLineCol $1))) }
  | 'bool' { (uncurry AbsMylang.BNFC'Position (tokenLineCol $1), AbsMylang.Bool (uncurry AbsMylang.BNFC'Position (tokenLineCol $1))) }
  | 'void' { (uncurry AbsMylang.BNFC'Position (tokenLineCol $1), AbsMylang.Void (uncurry AbsMylang.BNFC'Position (tokenLineCol $1))) }
  | Type '[]' { (fst $1, AbsMylang.Arr (fst $1) (snd $1)) }
  | '|' ListType '|' { (uncurry AbsMylang.BNFC'Position (tokenLineCol $1), AbsMylang.Tup (uncurry AbsMylang.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | '(' ListType ')' '->' Type { (uncurry AbsMylang.BNFC'Position (tokenLineCol $1), AbsMylang.Fun (uncurry AbsMylang.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $5)) }

ListType :: { (AbsMylang.BNFC'Position, [AbsMylang.Type]) }
ListType
  : {- empty -} { (AbsMylang.BNFC'NoPosition, []) }
  | Type { (fst $1, (:[]) (snd $1)) }
  | Type ',' ListType { (fst $1, (:) (snd $1) (snd $3)) }

Expr6 :: { (AbsMylang.BNFC'Position, AbsMylang.Expr) }
Expr6
  : Ident { (fst $1, AbsMylang.EVar (fst $1) (snd $1)) }
  | Integer { (fst $1, AbsMylang.ELitInt (fst $1) (snd $1)) }
  | 'true' { (uncurry AbsMylang.BNFC'Position (tokenLineCol $1), AbsMylang.ELitTrue (uncurry AbsMylang.BNFC'Position (tokenLineCol $1))) }
  | 'false' { (uncurry AbsMylang.BNFC'Position (tokenLineCol $1), AbsMylang.ELitFalse (uncurry AbsMylang.BNFC'Position (tokenLineCol $1))) }
  | '[]' { (uncurry AbsMylang.BNFC'Position (tokenLineCol $1), AbsMylang.EEmptyArr (uncurry AbsMylang.BNFC'Position (tokenLineCol $1))) }
  | '[' ListExpr ']' { (uncurry AbsMylang.BNFC'Position (tokenLineCol $1), AbsMylang.EArr (uncurry AbsMylang.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | '(' ListArgVal ')' '=>' Block { (uncurry AbsMylang.BNFC'Position (tokenLineCol $1), AbsMylang.EClos (uncurry AbsMylang.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $5)) }
  | Ident '(' ListExpr ')' { (fst $1, AbsMylang.EApp (fst $1) (snd $1) (snd $3)) }
  | Ident '[' Expr ']' { (fst $1, AbsMylang.EAcc (fst $1) (snd $1) (snd $3)) }
  | '|' ListExpr '|' { (uncurry AbsMylang.BNFC'Position (tokenLineCol $1), AbsMylang.ETup (uncurry AbsMylang.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | String { (fst $1, AbsMylang.EString (fst $1) (snd $1)) }
  | '(' Expr ')' { (uncurry AbsMylang.BNFC'Position (tokenLineCol $1), (snd $2)) }

Expr5 :: { (AbsMylang.BNFC'Position, AbsMylang.Expr) }
Expr5
  : '-' Expr6 { (uncurry AbsMylang.BNFC'Position (tokenLineCol $1), AbsMylang.Neg (uncurry AbsMylang.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | '!' Expr6 { (uncurry AbsMylang.BNFC'Position (tokenLineCol $1), AbsMylang.Not (uncurry AbsMylang.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | Expr6 { (fst $1, (snd $1)) }

Expr4 :: { (AbsMylang.BNFC'Position, AbsMylang.Expr) }
Expr4
  : Expr4 MulOp Expr5 { (fst $1, AbsMylang.EMul (fst $1) (snd $1) (snd $2) (snd $3)) }
  | Expr5 { (fst $1, (snd $1)) }

Expr3 :: { (AbsMylang.BNFC'Position, AbsMylang.Expr) }
Expr3
  : Expr3 AddOp Expr4 { (fst $1, AbsMylang.EAdd (fst $1) (snd $1) (snd $2) (snd $3)) }
  | Expr4 { (fst $1, (snd $1)) }

Expr2 :: { (AbsMylang.BNFC'Position, AbsMylang.Expr) }
Expr2
  : Expr2 RelOp Expr3 { (fst $1, AbsMylang.ERel (fst $1) (snd $1) (snd $2) (snd $3)) }
  | Expr3 { (fst $1, (snd $1)) }

Expr1 :: { (AbsMylang.BNFC'Position, AbsMylang.Expr) }
Expr1
  : Expr2 '&&' Expr1 { (fst $1, AbsMylang.EAnd (fst $1) (snd $1) (snd $3)) }
  | Expr2 { (fst $1, (snd $1)) }

Expr :: { (AbsMylang.BNFC'Position, AbsMylang.Expr) }
Expr
  : Expr1 '||' Expr { (fst $1, AbsMylang.EOr (fst $1) (snd $1) (snd $3)) }
  | Expr1 { (fst $1, (snd $1)) }

ListExpr :: { (AbsMylang.BNFC'Position, [AbsMylang.Expr]) }
ListExpr
  : {- empty -} { (AbsMylang.BNFC'NoPosition, []) }
  | Expr { (fst $1, (:[]) (snd $1)) }
  | Expr ',' ListExpr { (fst $1, (:) (snd $1) (snd $3)) }

AddOp :: { (AbsMylang.BNFC'Position, AbsMylang.AddOp) }
AddOp
  : '+' { (uncurry AbsMylang.BNFC'Position (tokenLineCol $1), AbsMylang.Plus (uncurry AbsMylang.BNFC'Position (tokenLineCol $1))) }
  | '-' { (uncurry AbsMylang.BNFC'Position (tokenLineCol $1), AbsMylang.Minus (uncurry AbsMylang.BNFC'Position (tokenLineCol $1))) }

MulOp :: { (AbsMylang.BNFC'Position, AbsMylang.MulOp) }
MulOp
  : '*' { (uncurry AbsMylang.BNFC'Position (tokenLineCol $1), AbsMylang.Times (uncurry AbsMylang.BNFC'Position (tokenLineCol $1))) }
  | '/' { (uncurry AbsMylang.BNFC'Position (tokenLineCol $1), AbsMylang.Div (uncurry AbsMylang.BNFC'Position (tokenLineCol $1))) }
  | '%' { (uncurry AbsMylang.BNFC'Position (tokenLineCol $1), AbsMylang.Mod (uncurry AbsMylang.BNFC'Position (tokenLineCol $1))) }

RelOp :: { (AbsMylang.BNFC'Position, AbsMylang.RelOp) }
RelOp
  : '<' { (uncurry AbsMylang.BNFC'Position (tokenLineCol $1), AbsMylang.LTH (uncurry AbsMylang.BNFC'Position (tokenLineCol $1))) }
  | '<=' { (uncurry AbsMylang.BNFC'Position (tokenLineCol $1), AbsMylang.LE (uncurry AbsMylang.BNFC'Position (tokenLineCol $1))) }
  | '>' { (uncurry AbsMylang.BNFC'Position (tokenLineCol $1), AbsMylang.GTH (uncurry AbsMylang.BNFC'Position (tokenLineCol $1))) }
  | '>=' { (uncurry AbsMylang.BNFC'Position (tokenLineCol $1), AbsMylang.GE (uncurry AbsMylang.BNFC'Position (tokenLineCol $1))) }
  | '==' { (uncurry AbsMylang.BNFC'Position (tokenLineCol $1), AbsMylang.EQU (uncurry AbsMylang.BNFC'Position (tokenLineCol $1))) }
  | '!=' { (uncurry AbsMylang.BNFC'Position (tokenLineCol $1), AbsMylang.NE (uncurry AbsMylang.BNFC'Position (tokenLineCol $1))) }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

-- Entrypoints

pProgram :: [Token] -> Err AbsMylang.Program
pProgram = fmap snd . pProgram_internal
}

