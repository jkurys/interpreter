-- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelMylang where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsMylang

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsMylang.Ident -> Result
transIdent x = case x of
  AbsMylang.Ident string -> failure x

transProgram :: Show a => AbsMylang.Program' a -> Result
transProgram x = case x of
  AbsMylang.Program _ topdefs -> failure x

transTopDef :: Show a => AbsMylang.TopDef' a -> Result
transTopDef x = case x of
  AbsMylang.FnDef _ type_ ident args block -> failure x
  AbsMylang.VarDef _ type_ ident expr -> failure x

transArg :: Show a => AbsMylang.Arg' a -> Result
transArg x = case x of
  AbsMylang.ArgVal _ argval -> failure x
  AbsMylang.ArgRef _ type_ ident -> failure x

transArgVal :: Show a => AbsMylang.ArgVal' a -> Result
transArgVal x = case x of
  AbsMylang.Value _ type_ ident -> failure x

transBlock :: Show a => AbsMylang.Block' a -> Result
transBlock x = case x of
  AbsMylang.Block _ stmts -> failure x

transStmt :: Show a => AbsMylang.Stmt' a -> Result
transStmt x = case x of
  AbsMylang.Empty _ -> failure x
  AbsMylang.BStmt _ block -> failure x
  AbsMylang.Decl _ type_ items -> failure x
  AbsMylang.DeclFn _ type_ ident args block -> failure x
  AbsMylang.DeclTup _ tups expr -> failure x
  AbsMylang.Ass _ lhs expr -> failure x
  AbsMylang.Incr _ ident -> failure x
  AbsMylang.Decr _ ident -> failure x
  AbsMylang.Ret _ expr -> failure x
  AbsMylang.VRet _ -> failure x
  AbsMylang.Cond _ expr stmt -> failure x
  AbsMylang.CondElse _ expr stmt1 stmt2 -> failure x
  AbsMylang.While _ expr stmt -> failure x
  AbsMylang.SExp _ expr -> failure x
  AbsMylang.Print _ expr -> failure x
  AbsMylang.Break _ -> failure x
  AbsMylang.Cont _ -> failure x

transTup :: Show a => AbsMylang.Tup' a -> Result
transTup x = case x of
  AbsMylang.NewTup _ tups -> failure x
  AbsMylang.ArgTup _ type_ ident -> failure x

transItem :: Show a => AbsMylang.Item' a -> Result
transItem x = case x of
  AbsMylang.NoInit _ ident -> failure x
  AbsMylang.Init _ ident expr -> failure x

transLHS :: Show a => AbsMylang.LHS' a -> Result
transLHS x = case x of
  AbsMylang.LVar _ ident -> failure x
  AbsMylang.LArr _ ident expr -> failure x

transType :: Show a => AbsMylang.Type' a -> Result
transType x = case x of
  AbsMylang.Int _ -> failure x
  AbsMylang.Str _ -> failure x
  AbsMylang.Bool _ -> failure x
  AbsMylang.Void _ -> failure x
  AbsMylang.Arr _ type_ -> failure x
  AbsMylang.Tup _ types -> failure x
  AbsMylang.Fun _ types type_ -> failure x

transExpr :: Show a => AbsMylang.Expr' a -> Result
transExpr x = case x of
  AbsMylang.EVar _ ident -> failure x
  AbsMylang.ELitInt _ integer -> failure x
  AbsMylang.ELitTrue _ -> failure x
  AbsMylang.ELitFalse _ -> failure x
  AbsMylang.EEmptyArr _ -> failure x
  AbsMylang.EArr _ exprs -> failure x
  AbsMylang.EClos _ argvals block -> failure x
  AbsMylang.EApp _ ident exprs -> failure x
  AbsMylang.EAcc _ ident expr -> failure x
  AbsMylang.ETup _ exprs -> failure x
  AbsMylang.EString _ string -> failure x
  AbsMylang.Neg _ expr -> failure x
  AbsMylang.Not _ expr -> failure x
  AbsMylang.EMul _ expr1 mulop expr2 -> failure x
  AbsMylang.EAdd _ expr1 addop expr2 -> failure x
  AbsMylang.ERel _ expr1 relop expr2 -> failure x
  AbsMylang.EAnd _ expr1 expr2 -> failure x
  AbsMylang.EOr _ expr1 expr2 -> failure x

transAddOp :: Show a => AbsMylang.AddOp' a -> Result
transAddOp x = case x of
  AbsMylang.Plus _ -> failure x
  AbsMylang.Minus _ -> failure x

transMulOp :: Show a => AbsMylang.MulOp' a -> Result
transMulOp x = case x of
  AbsMylang.Times _ -> failure x
  AbsMylang.Div _ -> failure x
  AbsMylang.Mod _ -> failure x

transRelOp :: Show a => AbsMylang.RelOp' a -> Result
transRelOp x = case x of
  AbsMylang.LTH _ -> failure x
  AbsMylang.LE _ -> failure x
  AbsMylang.GTH _ -> failure x
  AbsMylang.GE _ -> failure x
  AbsMylang.EQU _ -> failure x
  AbsMylang.NE _ -> failure x
